<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steffen D. Sommer</title>
    <description>An iOS developer blogging about topics such as ReactiveCocoa, MVVM, dependency injection, unit testing, autolayout, Swift and more.</description>
    <link>http://www.steffendsommer.com/</link>
    <atom:link href="http://www.steffendsommer.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 31 May 2015 01:10:30 +0200</pubDate>
    <lastBuildDate>Sun, 31 May 2015 01:10:30 +0200</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Tips for better asset handling in your iOS app</title>
        <description>&lt;h1 id=&quot;let-xcode-generate-1x-2x-and-3x-pngs&quot;&gt;1. Let Xcode generate 1x, 2x and 3x PNG’s&lt;/h1&gt;
&lt;p&gt;With the launch of Xcode 6, Apple provided a way for us to store assets as PDF files. Xcode will then handle the creation of 1x, 2x and 3x PNG files at build time. Convenient, but may not always be the best solution depending on your assets (as &lt;a href=&quot;http://bjango.com/articles/idontusepdfs/&quot; target=&quot;_blank&quot;&gt;highlighted here&lt;/a&gt;). The recent apps I’ve worked on had really simple assets without any shadows or gradients, and PDF files worked as a charm. Martin Craft has a &lt;a href=&quot;http://martiancraft.com/blog/2014/09/vector-images-xcode6/&quot; target=&quot;_blank&quot;&gt;fine description&lt;/a&gt; on how to get your started with PDF files in Xcode.&lt;/p&gt;

&lt;h1 id=&quot;color-your-own-assets&quot;&gt;2. Color your own assets&lt;/h1&gt;
&lt;p&gt;Sometimes as a developer, you’re given the entire design for the app you’re making. This is often not the case. Things change, such as design, placement of elements, colours and icons. That’s why I started experimenting with colouring all of my assets in code. This means time saved on the UX/graphics guy and an increase of flexibility in your app.&lt;/p&gt;

&lt;p&gt;Of course, all assets are not equally easy to color and some may not be appropriate for programatically being coloured at all. As mentioned, the last apps I’ve been working on had really simple “flat-ish” design, with no gradients or shadows. In this case, this approach worked really good.&lt;/p&gt;

&lt;p&gt;For colouring assets, you might want to bring in an external library such as UIImage+Additions, if you’re going to need all of that functionality. You could also just make your own small colouring method. Here is something to get you started:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;- (UIImage *)colorImage:(UIImage *)image color:(UIColor *)color
{
    UIGraphicsBeginImageContextWithOptions(image.size, NO, [UIScreen mainScreen].scale);
    CGContextRef context = UIGraphicsGetCurrentContext();

    CGContextTranslateCTM(context, 0, image.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);
    CGRect rect = CGRectMake(0, 0, image.size.width, image.size.height);

    CGContextSetBlendMode(context, kCGBlendModeNormal);
    CGContextDrawImage(context, rect, image.CGImage);
    CGContextSetBlendMode(context, kCGBlendModeSourceIn);
    [color setFill];
    CGContextFillRect(context, rect);


    UIImage *coloredImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return coloredImage;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will make a simple image asset go from:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/1428243313539.png&quot; alt=&quot;Alt text&quot; height=&quot;50px&quot; width=&quot;50px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/1428243326767.png&quot; width=&quot;50&quot; height=&quot;50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty simple, right? This will also make your app ready for skinning if that is what you want. If you have assets that contains multiple colours or gradients, you might want to look into tinting properties. Have a look at this SO answer for an example of tinting with UIImageView.&lt;/p&gt;

&lt;h1 id=&quot;make-a-facade-for-your-assets&quot;&gt;3. Make a facade for your assets&lt;/h1&gt;
&lt;p&gt;I like my code to be strict, in the sense that I want to guide any consumer of my code in the best way I can. One way of making my assets more strict is to make a facade for them. One way to do this, is to make a category on UIImage. Your category can then expose any assets that are allowed to be used throughout your code base. An example could be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-objc&quot;&gt;+ (instancetype)img_successIcon {
    return [self colorImage:[UIImage imageNamed:@&quot;thumbsup&quot;] color:[UIColor greenColor]];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the facade also centralises the list of assets for your app. This means that if your code uses this category, you only have to update paths to assets in one place. Naming your assets in general terms that makes sense for your app, also contributes to having a more flexible code base. Lastly, the facade can hide away any colouring of the assets.&lt;/p&gt;

&lt;p&gt;Feel free to get in touch if you have any questions or feedback. As always, I’m interested to improve the way I work.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Apr 2015 18:43:03 +0200</pubDate>
        <link>http://www.steffendsommer.com/blog/2015/04/05/tips-for-better-asset-handling-in-your-ios-app/</link>
        <guid isPermaLink="true">http://www.steffendsommer.com/blog/2015/04/05/tips-for-better-asset-handling-in-your-ios-app/</guid>
        
        
      </item>
    
      <item>
        <title>Useful resources for an iOS developer</title>
        <description>&lt;p&gt;There already exists great lists of resources for the iOS developer, as here and here and I also personally wrote up a list of my most used apps on Medium. However, new tools pop up all the time and sometimes it’s just hard to figure out what’s useful and what’s not. This is my take on a list of resources for iOS developers based on my personal preferences and experiences. The intention is not to create a full list of every alternative within each category, but to share resources I’ve either been satisfied to work with or plan to try out. I will probably update this post as I go along and get more experience in my worklife as an iOS developer. Feel free to add a comment if you feel like I’m missing something.&lt;/p&gt;

&lt;h1 id=&quot;design&quot;&gt;Design&lt;/h1&gt;

&lt;h2 id=&quot;sketchhttpbohemiancodingcomsketchtargetblank&quot;&gt;&lt;a href=&quot;http://bohemiancoding.com/sketch/&quot; target=&quot;_blank&quot;&gt;Sketch&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I love Sketch. I used to do quite a lot of graphics back in the days when I did a lot of web development (even though I’m a rather big amateur as being the graphics guy) and also I just like to be able to do basic graphics stuff when developing. I use Sketch for designing my own apps or for checking up on sizes etc. when being handed over designs for apps.&lt;/p&gt;

&lt;h2 id=&quot;pixelmatorhttpwwwpixelmatorcomtargetblank&quot;&gt;&lt;a href=&quot;http://www.pixelmator.com/&quot; target=&quot;_blank&quot;&gt;Pixelmator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With Sketch and Pixelmator, I do not need (or use) the rather pricy Illustrator and Photoshop. I use Pixelmator for simple resizing, cropping and other asset manipulation.&lt;/p&gt;

&lt;h2 id=&quot;xscopehttpxscopeappcomtargetblank&quot;&gt;&lt;a href=&quot;http://xscopeapp.com/&quot; target=&quot;_blank&quot;&gt;xScope&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am currently evaluating xScope for aligning designs provided by the designer and the actual look of the the apps I work on. So far I’ve been satisfied by using this app.&lt;/p&gt;

&lt;h2 id=&quot;zeplinhttpszepliniotargetblank&quot;&gt;&lt;a href=&quot;https://zeplin.io/&quot; target=&quot;_blank&quot;&gt;Zeplin&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve been experimenting with Zeplin, where I work, to be the tool for handing over designs to the developers from the designers. It’s pretty cool, as a developer, to be able to inspect all elements in the design (e.g. sizes and colours) and there’s also some really interesting features on the roadmap of Zeplin.&lt;/p&gt;

&lt;h1 id=&quot;code&quot;&gt;Code&lt;/h1&gt;

&lt;h2 id=&quot;appcodehttpswwwjetbrainscomobjctargetblank&quot;&gt;&lt;a href=&quot;https://www.jetbrains.com/objc/&quot; target=&quot;_blank&quot;&gt;AppCode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After refusing to use AppCode many times, I finally ended up having AppCode as my main iOS development IDE. It took me some time getting use to it, but I really do feel that I’m saving time over Xcode.&lt;/p&gt;

&lt;h2 id=&quot;xcodehttpsdeveloperapplecomxcodetargetblank&quot;&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot; target=&quot;_blank&quot;&gt;Xcode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I’m a fan of AppCode, I still use Xcode for interface building and editing project settings.&lt;/p&gt;

&lt;h2 id=&quot;towerhttpwwwgit-towercomtargetblank&quot;&gt;&lt;a href=&quot;http://www.git-tower.com/&quot; target=&quot;_blank&quot;&gt;Tower&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My favourite git client for the mac.&lt;/p&gt;

&lt;h2 id=&quot;kaleidoscopehttpwwwkaleidoscopeappcomtargetblank&quot;&gt;&lt;a href=&quot;http://www.kaleidoscopeapp.com/&quot; target=&quot;_blank&quot;&gt;Kaleidoscope&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My choice of diff tool. Worth the money? Yee.. kind of. It looks great!&lt;/p&gt;

&lt;h2 id=&quot;coderunnerhttpscoderunnerappcomtargetblank&quot;&gt;&lt;a href=&quot;https://coderunnerapp.com/&quot; target=&quot;_blank&quot;&gt;CodeRunner&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I never actually understood the need for using an app as CodeRunner until I figured that it’s simply just more convenient in some cases. I use it when developing/testing small snippets or when transforming Java into Objective-C/Swift.&lt;/p&gt;

&lt;h2 id=&quot;paintcodehttpwwwpaintcodeappcomtargetblank&quot;&gt;&lt;a href=&quot;http://www.paintcodeapp.com/&quot; target=&quot;_blank&quot;&gt;PaintCode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m personally a big fan of having flexible assets. One way of doing this is to draw assets using code. Another big benefit of using PaintCode is that it suddenly makes it a lot easier to create custom UI components. PaintCode is an app I’ve been trying out, but haven’t included it in my every-day toolbelt (yet).&lt;/p&gt;

&lt;h2 id=&quot;coreanimatorhttpwwwcoreanimatorcomanimatecodetargetblank&quot;&gt;&lt;a href=&quot;http://www.coreanimator.com/#animatecode&quot; target=&quot;_blank&quot;&gt;CoreAnimator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve only worked briefly with CoreAnimation and everything else has been simple UIView animations. When I have the time (or need) I will look into trying out CoreAnimator as I think it looks pretty neat.&lt;/p&gt;

&lt;h1 id=&quot;data-management&quot;&gt;Data management&lt;/h1&gt;

&lt;h2 id=&quot;sequel-prohttpwwwsequelprocomtargetblank&quot;&gt;&lt;a href=&quot;http://www.sequelpro.com/&quot; target=&quot;_blank&quot;&gt;Sequel Pro&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My go-to MySQL database client app.&lt;/p&gt;

&lt;h2 id=&quot;basehttpmenialcoukbasetargetblank&quot;&gt;&lt;a href=&quot;http://menial.co.uk/base/&quot; target=&quot;_blank&quot;&gt;Base&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I use Base for checking out my local SQLite database. It does the job.&lt;/p&gt;

&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;/h1&gt;

&lt;h2 id=&quot;revealhttprevealappcomtargetblank&quot;&gt;&lt;a href=&quot;http://revealapp.com/&quot; target=&quot;_blank&quot;&gt;Reveal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My most recent app purchase which I’m starting to realise that I couldn’t live without. When doing auto layout constraints in code, Reveal is really useful for debugging. AppCode comes with a built-in integration.&lt;/p&gt;

&lt;h2 id=&quot;pawhttpsluckymarmotcomtargetblank&quot;&gt;&lt;a href=&quot;https://luckymarmot.com/&quot; target=&quot;_blank&quot;&gt;Paw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of my recent purchases. I used to use the Postman extension for Chrome, but I prefer to have it as a standalone app. And oh ye, I don’t use Chrome. I really like Paw!&lt;/p&gt;

&lt;h2 id=&quot;crashlyticshttpstrycrashlyticscomtargetblank&quot;&gt;&lt;a href=&quot;https://try.crashlytics.com/&quot; target=&quot;_blank&quot;&gt;Crashlytics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The service I’ve used the most for keeping track of crashes in the apps I work on. I think it is a pretty straightforward tool to use and it has been really stable.&lt;/p&gt;

&lt;h2 id=&quot;instabughttpsinstabugcomtargetblank&quot;&gt;&lt;a href=&quot;https://instabug.com/&quot; target=&quot;_blank&quot;&gt;Instabug&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bug reporting as it should be: shake the device, draw the point of attention and leave a message. I haven’t used the service that much, but I’ve been playing around with it since the beta. I really like the approach they’re taking.&lt;/p&gt;

&lt;h1 id=&quot;deployment&quot;&gt;Deployment&lt;/h1&gt;

&lt;h2 id=&quot;parsehttpsparsecomtargetblank&quot;&gt;&lt;a href=&quot;https://parse.com/&quot; target=&quot;_blank&quot;&gt;Parse&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve done backends in PHP, Ruby on Rails, Java and by using a lot different services. Being an iOS developer, I really try to avoid being caught up in a lot of backend development. That’s why I tend to use Parse. It simply just allows me to do more iOS development.&lt;/p&gt;

&lt;h2 id=&quot;firebasehttpswwwfirebasecomtargetblank&quot;&gt;&lt;a href=&quot;https://www.firebase.com/&quot; target=&quot;_blank&quot;&gt;Firebase&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I need to make apps that are more dependent on realtime communication, I’ve been playing around with Firebase. It’s really easy to integrate and it works really well.&lt;/p&gt;

&lt;h2 id=&quot;herokuhttpswwwherokucomtargetblank&quot;&gt;&lt;a href=&quot;https://www.heroku.com/&quot; target=&quot;_blank&quot;&gt;Heroku&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If I end up coding my own backend, I tend to deploy it to Heroku.&lt;/p&gt;

&lt;h1 id=&quot;statistics&quot;&gt;Statistics&lt;/h1&gt;

&lt;h2 id=&quot;segmenthttpssegmentcomtargetblank&quot;&gt;&lt;a href=&quot;https://segment.com/&quot; target=&quot;_blank&quot;&gt;Segment&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It sucks to integrate multiple SDK’s and it’s annoying to have to upload a new version to the App Store when you want to integrate another analytics library. Segment tries to solve this by being the single hub for collecting app usage data. I haven’t used it yet, but it seems really cool.&lt;/p&gt;

&lt;h2 id=&quot;mixpanelhttpsmixpanelcomtargetblank&quot;&gt;&lt;a href=&quot;https://mixpanel.com/&quot; target=&quot;_blank&quot;&gt;Mixpanel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used Mixpanel in a single project for analysing how the users used the app. Mixpanel provides a really clean interface making it much nicer and easier to get the overview of the usage.&lt;/p&gt;

&lt;h1 id=&quot;productivity&quot;&gt;Productivity&lt;/h1&gt;

&lt;h2 id=&quot;letterspacehttpsprogrammerbirdcomletterspacetargetblank&quot;&gt;&lt;a href=&quot;https://programmerbird.com/letterspace/&quot; target=&quot;_blank&quot;&gt;Letterspace&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Normally I use Evernote for handling notes. However, I started to feel like it offered too much functionality and that’s why I tried out Letterspace. Letterspace uses markdown formatting and syncs with iCloud. The interface is clean and it’s possible to tag notes with # and @.&lt;/p&gt;

&lt;h2 id=&quot;alfredhttpwwwalfredappcomtargetblank&quot;&gt;&lt;a href=&quot;http://www.alfredapp.com/&quot; target=&quot;_blank&quot;&gt;Alfred&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I use Alfred as a replacement for the OSX built-in Spotlight. It works great together with Dash and I have some minor workflows I use from time to time. I also use the built-in clipboard manager, which is now irreplaceable.&lt;/p&gt;

&lt;h2 id=&quot;dashhttpkapelicomdashtargetblank&quot;&gt;&lt;a href=&quot;http://kapeli.com/dash&quot; target=&quot;_blank&quot;&gt;Dash&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This app has ended up being irreplaceable. I use Dash for my personal snippets (synced using iCloud) and for reading documentation. Always googling that ReactiveCocoa method? Use Dash and save yourself some time. It is really convenient.&lt;/p&gt;

&lt;h2 id=&quot;mouhttp25iomoutargetblank&quot;&gt;&lt;a href=&quot;http://25.io/mou/&quot; target=&quot;_blank&quot;&gt;Mou&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When doing README files or other mark down stuff I open Mou. It’s simple and it does the job.&lt;/p&gt;

&lt;h2 id=&quot;reflectorhttpwwwairsquirrelscomreflectortargetblank&quot;&gt;&lt;a href=&quot;http://www.airsquirrels.com/reflector/&quot; target=&quot;_blank&quot;&gt;Reflector&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When needing to present apps, it somehow always is the case that neither an AppleTV or the proper cable for showing apps directly from your phone is present. I use Reflector to demo apps through my laptop.&lt;/p&gt;

&lt;h2 id=&quot;cinchhttpwwwirradiatedsoftwarecomcinchtargetblank&quot;&gt;&lt;a href=&quot;http://www.irradiatedsoftware.com/cinch/&quot; target=&quot;_blank&quot;&gt;Cinch&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I never really understood the green OSX window button (named?) pre-Yosemite. Post-Yosemite I just think it’s a bit obtrusive. For once, I like the Windows behavior (I know..) more. Because of that, I use Cinch.&lt;/p&gt;

&lt;h1 id=&quot;news-sources&quot;&gt;News sources&lt;/h1&gt;

&lt;h2 id=&quot;objciohttpwwwobjciotargetblank&quot;&gt;&lt;a href=&quot;http://www.objc.io/&quot; target=&quot;_blank&quot;&gt;objc.io&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;High quality iOS development content published each month covering a wide range of topics such as architecture, debugging, games and security.&lt;/p&gt;

&lt;h2 id=&quot;nsscreencasthttpnsscreencastcomtargetblank&quot;&gt;&lt;a href=&quot;http://nsscreencast.com/&quot; target=&quot;_blank&quot;&gt;NSScreencast&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Small weekly screencasts that focuses on a wide range of iOS development topics. &lt;/p&gt;

&lt;h2 id=&quot;ios-dev-weeklyhttpsiosdevweeklycomtargetblank&quot;&gt;&lt;a href=&quot;https://iosdevweekly.com/&quot; target=&quot;_blank&quot;&gt;iOS Dev Weekly&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A weekly newsletter with handpicked iOS development links. I like the personal touch of the author and that the majority of links are topical.&lt;/p&gt;

&lt;h2 id=&quot;ios-goodieshttpios-goodiescomtargetblank&quot;&gt;&lt;a href=&quot;http://ios-goodies.com/&quot; target=&quot;_blank&quot;&gt;iOS Goodies&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another weekly newsletter of handpicked iOS development links in categories.&lt;/p&gt;

&lt;h2 id=&quot;natasha-the-robothttpnatashatherobotcomtargetblank&quot;&gt;&lt;a href=&quot;http://natashatherobot.com/&quot; target=&quot;_blank&quot;&gt;Natasha The Robot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last weekly newsletter with iOS development links I’m subscribed too. The main focus of this newsletter is on Swift and that’s why I subscribe to it.&lt;/p&gt;

&lt;h2 id=&quot;iphreaks-showhttpdevchattviphreakstargetblank&quot;&gt;&lt;a href=&quot;http://devchat.tv/iphreaks&quot; target=&quot;_blank&quot;&gt;iPhreaks Show&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My favourite iOS podcast. The panel discusses a lot of different topics related to iOS development. Everything from processes, to open source and personal branding.&lt;/p&gt;

&lt;h2 id=&quot;build-phasehttpbuildphasefmtargetblank&quot;&gt;&lt;a href=&quot;http://buildphase.fm/&quot; target=&quot;_blank&quot;&gt;Build Phase&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another podcast on my list which I try to keep up with. The podcast is a bit more casual and loose in the agenda compared to the iPhreaks Show.&lt;/p&gt;

&lt;h2 id=&quot;nshipsterhttpnshipstercomtargetblank&quot;&gt;&lt;a href=&quot;http://nshipster.com/&quot; target=&quot;_blank&quot;&gt;NSHipster&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Probably my favourite iOS development blog. The blog dives into small areas that are easy to overlook.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 20:32:14 +0100</pubDate>
        <link>http://www.steffendsommer.com/blog/2015/03/10/useful-resources-for-an-ios-developer/</link>
        <guid isPermaLink="true">http://www.steffendsommer.com/blog/2015/03/10/useful-resources-for-an-ios-developer/</guid>
        
        
      </item>
    
      <item>
        <title>We are live</title>
        <description>&lt;p&gt;After been working as a full-time iOS developer for approximately 7 months, I figured it was time for me to start sharing my experiences and knowledge as I progress.&lt;/p&gt;

&lt;p&gt;I am currently working with, and trying to find best practices using, ReactiveCocoa and MVVM. Going forward I plan to dive more into Swift while also practicing functional programming more. Lastly, I want to be better at doing testing in iOS and perhaps try to change my mindset as a developer towards something as BDD. &lt;/p&gt;

&lt;p&gt;My intention is to try and simplify my findings along the way and I encourage any reader to reach out if you have any question or general feedback. Welcome to my blog.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Feb 2015 23:40:08 +0100</pubDate>
        <link>http://www.steffendsommer.com/blog/2015/02/21/we-are-live/</link>
        <guid isPermaLink="true">http://www.steffendsommer.com/blog/2015/02/21/we-are-live/</guid>
        
        
      </item>
    
  </channel>
</rss>
